//FixedPipeline - Phong : Fragment shader

varying vec3 ecPosition;	//Eye coordinates
varying vec3 N;				//Normal vector

void main(void)
{
		//View vector
		vec3 V = normalize(-ecPosition);
		
		//Incident light vector
		vec3 L = normalize(gl_LightSource[0].position.xyz - ecPosition);
		
		//Lambert term : must be positive
		float LambertReflectance = max(dot(L,N), 0.0);
		
		//Reflected light vector
		vec3 R = normalize(-reflect(L,N));
		
		//Ambient term : k_a * i_a
		vec4 I_a = gl_FrontLightProduct[0].ambient;

		//Diffuse term : k_d * i_d * LambertReflectance
		vec4 I_d = gl_FrontLightProduct[0].diffuse * LambertReflectance;
		I_d = clamp(I_d, 0.0, 1.0);	//Must be ranged between 0 and 1

		//Specular term : k_s * i_s * (RÂ°V)^alpha
		vec4 I_s = gl_FrontLightProduct[0].specular 
					* pow(
							max(dot(R,V), 0.0),
							gl_FrontMaterial.shininess
						);
		I_s = clamp(I_s, 0.0, 1.0);	//Must be ranged between 0 and 1

		//Resulting color
		gl_FragColor = gl_FrontLightModelProduct.sceneColor 
						+ I_a + I_d + I_s;
}

/*

Illum = k_a*i_a + k_d * i_d * (dot(L,N)) + k_s * i_s *(dot(R, V)^alpha)

L : incident light vector
R : reflected incident vector

k_s		: material's specular constant
k_d		: material's diffuse constant
k_a		: material's ambient constant
alpha	: material's shininess constant

i_s 	: specular lighting
i_d		: diffuse lighting
i_a		: ambient lighting

*/